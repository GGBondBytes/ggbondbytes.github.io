<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>执行上下文</title>
      <link href="/2023/08/02/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
      <url>/2023/08/02/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>:::info<br>大部分翻译自：<a href="https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0">https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0</a>。<br>:::</p><h1 id="什么是执行上下文"><a href="#什么是执行上下文" class="headerlink" title="什么是执行上下文"></a>什么是执行上下文</h1><p>执行上下文：抽象概念，评估和执行js代码的环境。当前执行环境的变量、函数声明、作用链域、this等信息</p><h1 id="执行上下文分类"><a href="#执行上下文分类" class="headerlink" title="执行上下文分类"></a>执行上下文分类</h1><ol><li><strong>全局执行上下文</strong>   这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 <code>this</code> 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。</li><li><strong>函数执行上下文</strong> — 每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。</li><li><strong>Eval 函数执行上下文</strong> — 执行在 <code>eval</code> 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 <code>eval</code>，所以在这里我不会讨论它。</li></ol><h1 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h1><ul><li>js引擎第一次遇见js脚本，创建全局上下文，压栈；</li><li>遇到函数调用，创建函数上下文，压栈；</li><li>执行函数调用，出栈；</li><li>所有代码执行完毕，js引擎从当前栈移除全局上下文</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Inside first function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Again inside first function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Inside second function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Inside Global Execution Context'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/'%E6%89%A7%E8%A1%8C%E6%A0%88.jpg'"></p><h1 id="执行上下文的生命周期"><a href="#执行上下文的生命周期" class="headerlink" title="执行上下文的生命周期"></a>执行上下文的生命周期</h1><h2 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h2><p>执行上下文在创建阶段做两件事情：<br>创建词法环境组件（LexicalEnvironment）<br>创建变量环境组件（VariableEnvironment）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ExecutionContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  LexicalEnvironment <span class="token operator">=</span> <span class="token operator">&lt;</span>ref<span class="token punctuation">.</span> to LexicalEnvironment <span class="token keyword">in</span> memory<span class="token operator">></span><span class="token punctuation">,</span>  VariableEnvironment <span class="token operator">=</span> <span class="token operator">&lt;</span>ref<span class="token punctuation">.</span> to VariableEnvironment <span class="token keyword">in</span>  memory<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="词法环境（LexicalEnvironment）"><a href="#词法环境（LexicalEnvironment）" class="headerlink" title="词法环境（LexicalEnvironment）"></a>词法环境（LexicalEnvironment）</h3><p>一种持有<strong>标识符—变量映射</strong>的结构。</p><ul><li><strong>标识符</strong>指的是变量&#x2F;函数的名字</li><li><strong>变量</strong>是对实际对象(包含函数类型对象)或原始数据的引用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的词法环境结构如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">lexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token operator">&lt;</span>ref<span class="token punctuation">.</span> to foo <span class="token keyword">function</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="词法环境的组成部分：环境记录器、外部环境的引用、this绑定"><a href="#词法环境的组成部分：环境记录器、外部环境的引用、this绑定" class="headerlink" title="词法环境的组成部分：环境记录器、外部环境的引用、this绑定"></a><strong>词法环境的组成部分</strong>：环境记录器、外部环境的引用、this绑定</h3><p><img src="/'%E8%AF%8D%E6%B3%95%E7%8E%AF%E5%A2%83%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.jpg'"></p><h4 id="环境记录器：环境记录是词法环境中存储变量和函数声明的地方"><a href="#环境记录器：环境记录是词法环境中存储变量和函数声明的地方" class="headerlink" title="环境记录器：环境记录是词法环境中存储变量和函数声明的地方"></a><strong>环境记录器</strong>：环境记录是词法环境中存储变量和函数声明的地方</h4><p><img src="/'%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95%E5%99%A8.jpg'"><br>:::info<br>对于函数代码而言，环境记录还包含一个参数对象，该对象包含传递给函数的索引和参数之间的映射，以及传递给函数的参数长度（个数)。例如，下面函数的参数对象如下所示：<br>:::</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// argument object</span><span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外部环境的引用："><a href="#外部环境的引用：" class="headerlink" title="外部环境的引用："></a><strong>外部环境的引用：</strong></h4><p>对外部环境的引用意味着它可以访问外部词法环境。<br>也就是说，如果当前词法环境中没有变量，JavaScript 引擎可以在外部环境中查找这些变量。</p><h4 id="this绑定："><a href="#this绑定：" class="headerlink" title="this绑定："></a><strong>this绑定：</strong></h4><p>在该组成部分中，this 的值被确定或设置。</p><ol><li>在全局执行上下文中，this 的值指的是全局对象。(在浏览器中，它指的是窗口对象）。</li><li>在函数执行上下文中，this 的值取决于函数的调用方式。如果函数是通过对象引用调用的，则 this 的值将设置为该对象；否则，this 的值将设置为全局对象或未定义（在严格模式下）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'peter'</span><span class="token punctuation">,</span>  <span class="token literal-property property">birthYear</span><span class="token operator">:</span> <span class="token number">1994</span><span class="token punctuation">,</span>  <span class="token function-variable function">calcAge</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2018</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birthYear<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>person<span class="token punctuation">.</span><span class="token function">calcAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'this' refers to 'person', because 'calcAge' was called with //'person' object reference</span><span class="token keyword">const</span> calculateAge <span class="token operator">=</span> person<span class="token punctuation">.</span>calcAge<span class="token punctuation">;</span><span class="token function">calculateAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 'this' refers to the global window object, because no object reference was given</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象地说，词法环境在伪代码中是这样的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">GlobalExectionContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>    <span class="token punctuation">&#125;</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token operator">:</span> <span class="token operator">&lt;</span>global object<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>FunctionExectionContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>    <span class="token punctuation">&#125;</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global or outer <span class="token keyword">function</span> environment reference<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token operator">:</span> <span class="token operator">&lt;</span>depends on how <span class="token keyword">function</span> is called<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变环境"><a href="#可变环境" class="headerlink" title="可变环境"></a>可变环境</h3><p>它也是一个词法环境，其 EnvironmentRecord 保存着 VariableStatements 在此执行上下文中创建的绑定。<br><strong>如上文所述，变量环境也是词法环境，因此它具有上文定义的词法环境的所有属性和组件。</strong><br>在 ES6 中，<strong>LexicalEnvironment 组件与 VariableEnvironment 组件的区别在于，前者用于存储函数声明和变量（let 和 const）绑定，而后者仅用于存储变量（var）绑定。</strong></p><h2 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h2><p>在此阶段，完成对所有这些变量的分配，最后执行代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">return</span> e <span class="token operator">*</span> f <span class="token operator">*</span> g<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>c <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述代码时，JavaScript 引擎会创建一个全局执行上下文来执行全局代码。因此，在创建阶段，全局执行上下文将是这样的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">GlobalExectionContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">></span><span class="token punctuation">,</span>      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">></span><span class="token punctuation">,</span>      <span class="token literal-property property">multiply</span><span class="token operator">:</span> <span class="token operator">&lt;</span> func <span class="token operator">></span>    <span class="token punctuation">&#125;</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行阶段，变量赋值已经完成。因此，在执行阶段，全局执行上下文将如下所示。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">GlobalExectionContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>      <span class="token literal-property property">multiply</span><span class="token operator">:</span> <span class="token operator">&lt;</span> func <span class="token operator">></span>    <span class="token punctuation">&#125;</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用函数 multiply(20, 30) 时，会创建一个新的函数执行上下文来执行函数代码。因此，在创建阶段，函数执行上下文将如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">FunctionExectionContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>GlobalLexicalEnvironment<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object or <span class="token keyword">undefined</span><span class="token operator">></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token keyword">undefined</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>GlobalLexicalEnvironment<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object or <span class="token keyword">undefined</span><span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此之后，执行上下文将进入执行阶段，即完成对函数内部变量的赋值。因此，在执行阶段，函数的执行上下文将如下所示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">FunctionExectionContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>GlobalLexicalEnvironment<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object or <span class="token keyword">undefined</span><span class="token operator">></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>      <span class="token comment">// Identifier bindings go here</span>      <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">20</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>GlobalLexicalEnvironment<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object or <span class="token keyword">undefined</span><span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数完成后，返回值将存储在 c 中。之后，全局代码完成，程序结束。</p><p>注–你可能已经注意到，在创建阶段，let 和 const 定义的变量没有任何相关值，但 var 定义的变量被设置为未定义。<br>这是因为在创建阶段，代码会扫描变量和函数声明，而函数声明会完整地存储在环境中，变量最初会被设置为未定义（var 的情况）或保持未初始化（let 和 const 的情况）。<br>这就是为什么你可以在声明 var 定义变量之前访问它们（尽管它们未定义），但在声明 let 和 const 变量之前访问它们时会出现引用错误的原因。<br>这就是我们所说的挂起。<br>注意：在执行阶段，如果 JavaScript 引擎无法在源代码中声明 let 变量的实际位置找到它的值，就会将其赋值为 undefined。</p><h1 id="执行上下文的特点"><a href="#执行上下文的特点" class="headerlink" title="执行上下文的特点"></a>执行上下文的特点</h1><ol><li>单线程</li><li>同步执行</li><li>全局唯一</li><li>函数每调用一次生成一个新的执行上下文环境</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件系统</title>
      <link href="/2023/07/28/%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/07/28/%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="事件系统"><a href="#事件系统" class="headerlink" title="事件系统"></a>事件系统</h1><p>虚拟dom在内存中以<strong>对象</strong>的形式存在，基于虚拟dom，实现了<strong>SyntheticEvent（合成事件）</strong>层，与原生事件拥有相同的接口，同样支持事件冒泡，可使用<strong>stopPropagation(</strong>)和**preventDefault()**中断。</p><h2 id="SyntheticEvent的绑定方式"><a href="#SyntheticEvent的绑定方式" class="headerlink" title="SyntheticEvent的绑定方式"></a>SyntheticEvent的绑定方式</h2><ul><li>驼峰式命名法命名属性（html为全部小写）</li><li>props可以为任意属性（html只接收字符串）</li></ul><h2 id="SyntheticEvent的实现机制"><a href="#SyntheticEvent的实现机制" class="headerlink" title="SyntheticEvent的实现机制"></a>SyntheticEvent的实现机制</h2><h3 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h3><p>事件代理机制，将所有的时间绑定到最外层，使用一个统一的<strong>事件监听器</strong>管理映射，当组件挂载卸载时，只需要在事件监听器上新增或者删除一些对象。当事件发生时，事件监听器先处理找到实际的事件函数调用，简化了<strong>事件处理和回收机制，提升了效率。</strong></p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li><strong>bind方法</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">btnClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>无传参时可简化：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>btnClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>构造器内绑定</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">constructor<span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>btnClick<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">btnClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>箭头函数</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token keyword">const</span> <span class="token function-variable function">btnClick</span><span class="token operator">=</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>btnClick<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用原生事件"><a href="#使用原生事件" class="headerlink" title="使用原生事件"></a>使用原生事件</h3><p>class组件在<strong>componentDidMount中绑定原生事件</strong>，但是需要注意的是，<strong>在使用原生事件时，要在componentWillUnmount中手动移除，防止内存泄漏</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">btnClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>button ref<span class="token operator">=</span><span class="token string">'button'</span><span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SyntheticEvent和原生事件混用"><a href="#SyntheticEvent和原生事件混用" class="headerlink" title="SyntheticEvent和原生事件混用"></a>SyntheticEvent和原生事件混用</h2><p>合成事件内部仅仅只是把最外层的容器进行了绑定，并依赖事件的冒泡机制完成事件委派。事件并不会绑定到真实的div上，所有使用stopProppagation没有用。</p><p><strong>解决方案：</strong></p><ol><li><strong>不要混用合成事件和原生事件</strong></li><li><strong>通过e?.target判断来避免</strong></li></ol><p>此外用reactEvent.nativeEvent.stopPropagation()来阻止冒泡是不行的，<strong>阻止react事件冒泡的行为只能用于react合成事件当中，且无法阻止dom原生事件；反之，在原生事件中阻止冒泡，可以阻止react合成事件冒泡</strong></p><p><strong>react的合成事件系统只是原生dom事件的子集。</strong>有些方法还是需要用原生的dom事件完成，比如window的resize事件。</p><h2 id="对比原生事件和合成事件"><a href="#对比原生事件和合成事件" class="headerlink" title="对比原生事件和合成事件"></a>对比原生事件和合成事件</h2><ul><li><strong>阻止事件传播与事件传播</strong></li></ul><p>react只实现了阻止事件传播。</p><p>原生的事件传播分为三个阶段：事件捕获阶段—-&gt;目标对象本身的事件程序处理程序调用—-&gt;事件冒泡。</p><ul><li><strong>事件类型</strong></li></ul><p>合成事件系统只是原生dom事件的子集。</p><ul><li><strong>事件绑定方式</strong></li></ul><p>直接在dom上绑定、在js中，通过为元素的事件属性赋值的方式(el.onclick&#x3D;e&#x3D;&gt;console.log(e))、通过事件监听函数（addEventListener(先绑定先执行)、attachEvent(IE,后绑定先执行)）</p><h2 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h2><p>尽量避免使用非受控组件</p><h1 id="组件之间通信"><a href="#组件之间通信" class="headerlink" title="组件之间通信"></a>组件之间通信</h1><h2 id="父子之间通信"><a href="#父子之间通信" class="headerlink" title="父子之间通信"></a>父子之间通信</h2><p>props</p><h2 id="子父之间通信"><a href="#子父之间通信" class="headerlink" title="子父之间通信"></a>子父之间通信</h2><p>回调函数</p><p>自定义事件机制</p><h2 id="跨级组件通信"><a href="#跨级组件通信" class="headerlink" title="跨级组件通信"></a>跨级组件通信</h2><p>context,慎用，一般建议全局信息且不会更改，例如主题，用户信息，防止不知道context从哪里传过来。</p><h2 id="无嵌套关系的组价之间"><a href="#无嵌套关系的组价之间" class="headerlink" title="无嵌套关系的组价之间"></a>无嵌套关系的组价之间</h2><p>自定义事件</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Pub&#x2F;Sub模式的实现简单，即用全局对象保存事件、用广播的方式处理事件，缺点是逻辑混乱。应当避免使用，加入强依赖和约定是更好的方法</p><h1 id="组件间抽象"><a href="#组件间抽象" class="headerlink" title="组件间抽象"></a>组件间抽象</h1><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><h3 id="引入minin的目的"><a href="#引入minin的目的" class="headerlink" title="引入minin的目的"></a>引入minin的目的</h3><p>早期是为了为了创造一种类似多继承的效果。知道es6引入class才向着标准化靠拢。</p><h3 id="封装minin"><a href="#封装minin" class="headerlink" title="封装minin"></a>封装minin</h3><p>广义的mixin方法，就是用赋值的方式将mixin对象里面的方法挂载到原对象上面，来实现对对象的混入。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>mixins</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> newObj<span class="token operator">=</span>obj<span class="token punctuation">;</span>  newObj<span class="token punctuation">.</span>prototype<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> mixinsKey <span class="token keyword">in</span> mixins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mixins<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>mixinsKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      newObj<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>mixinsKey<span class="token punctuation">]</span><span class="token operator">=</span>mixins<span class="token punctuation">[</span>mixinsKey<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="react中使用mixin"><a href="#react中使用mixin" class="headerlink" title="react中使用mixin"></a>react中使用mixin</h3><p>react在使用createClass构建组件时提供了mixin属性。比如<strong>PureRenderMixin:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>impotr PureRenderMixin <span class="token keyword">from</span> <span class="token string">'react-addons-pure-render-mixin'</span><span class="token punctuation">;</span>React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">mixin</span><span class="token operator">:</span><span class="token punctuation">[</span>PureRenderMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>aaa<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mixin数组可增加多个mixin,<strong>在不同的mixin实现两个相同的如同方法，后面的方法不会覆盖前面的方法，但是会报ReactClassInterface里面的错。因此，在React中不允许出现重名方法的mixin。</strong></p><p><strong>使用ReactClass实现mixin为组件做了两件事：</strong></p><ul><li>共享一些工具方法</li><li>生命周期的继承，props和state合并。</li></ul><h3 id="mixin缺点"><a href="#mixin缺点" class="headerlink" title="mixin缺点"></a>mixin缺点</h3><ul><li>破坏了组件原有的封装</li><li>命名冲突</li><li>增加复杂性</li></ul><h1 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h1><h2 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h2><p><strong>通过高阶组件来传递props，即为属性代理</strong></p><p>使用属性代理时，不同于mixin，类似于<strong>堆栈调用：</strong></p><p><strong>didmount-&gt;HOC didmount-&gt;(HOCs didmount)-&gt;(HOCs will unmount)-&gt;HOC willunmount-&gt;unmount</strong></p><p>功能：</p><ul><li>控制props</li></ul><p>可以增加，移除，编辑传进来的props，<strong>应尽可能对高阶组件的props做新的命名。</strong></p><ul><li>通过refs使用引用</li><li>抽象state</li></ul><p>高阶组件可以将原组件抽象为展示型组件，分离内部状态</p><ul><li>使用其他元素包裹组件</li></ul><p><strong>HOC与mixin不同：</strong></p><p><strong>高阶组件符合函数式编程的，对于原组件来说，并不会感知到高阶组件的存在，只需要把功能套在其之上，避免了使用mixin时产生的副作用。</strong></p><p><img src="/2023/07/28/%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/mixin.png"></p><h2 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Test</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">InputComponent</span><span class="token punctuation">)</span><span class="token operator">=></span>  <span class="token keyword">class</span> <span class="token class-name">extends</span> InputComponent<span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，高阶组件的返回组件继承于InputComponent，因此被动的继承了InputComponent。方法可以通过super来调用，调用顺序与队列一致：</p><p><strong>didmount-&gt;HOC didmount-&gt;(HOCs didmount)-&gt;will unmount-&gt;HOC will unmount-&gt;(HOCs willunmount)</strong></p><ul><li><strong>渲染劫持</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debouncePromise</title>
      <link href="/2022/07/14/debouncePromise/"/>
      <url>/2022/07/14/debouncePromise/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 中断当前promise</span><span class="token keyword">function</span> <span class="token function">abortPromise</span><span class="token punctuation">(</span><span class="token parameter">promise1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> abort<span class="token punctuation">;</span>  <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    abort <span class="token operator">=</span> reject<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span>abort <span class="token operator">=</span> abort<span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// promise防抖</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debouncePromise</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> promise<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> promise<span class="token punctuation">.</span>abort <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      promise<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> timeoutPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    promise <span class="token operator">=</span> <span class="token function">abortPromise</span><span class="token punctuation">(</span>timeoutPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
